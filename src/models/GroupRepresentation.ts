/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GroupRepresentation
 */
export interface GroupRepresentation {
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GroupRepresentation
     */
    access?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GroupRepresentation
     */
    attributes?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GroupRepresentation
     */
    clientRoles?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRepresentation
     */
    path?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRepresentation
     */
    realmRoles?: Array<string>;
    /**
     * 
     * @type {Array<GroupRepresentation>}
     * @memberof GroupRepresentation
     */
    subGroups?: Array<GroupRepresentation>;
}

/**
 * Check if a given object implements the GroupRepresentation interface.
 */
export function instanceOfGroupRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GroupRepresentationFromJSON(json: any): GroupRepresentation {
    return GroupRepresentationFromJSONTyped(json, false);
}

export function GroupRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'access': !exists(json, 'access') ? undefined : json['access'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'clientRoles': !exists(json, 'clientRoles') ? undefined : json['clientRoles'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'realmRoles': !exists(json, 'realmRoles') ? undefined : json['realmRoles'],
        'subGroups': !exists(json, 'subGroups') ? undefined : ((json['subGroups'] as Array<any>).map(GroupRepresentationFromJSON)),
    };
}

export function GroupRepresentationToJSON(value?: GroupRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'access': value.access,
        'attributes': value.attributes,
        'clientRoles': value.clientRoles,
        'id': value.id,
        'name': value.name,
        'path': value.path,
        'realmRoles': value.realmRoles,
        'subGroups': value.subGroups === undefined ? undefined : ((value.subGroups as Array<any>).map(GroupRepresentationToJSON)),
    };
}

