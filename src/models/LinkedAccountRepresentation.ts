/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LinkedAccountRepresentation
 */
export interface LinkedAccountRepresentation {
    /**
     * 
     * @type {boolean}
     * @memberof LinkedAccountRepresentation
     */
    connected?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LinkedAccountRepresentation
     */
    isSocial?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccountRepresentation
     */
    providerAlias?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccountRepresentation
     */
    providerName?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccountRepresentation
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccountRepresentation
     */
    linkedUsername?: string;
}

/**
 * Check if a given object implements the LinkedAccountRepresentation interface.
 */
export function instanceOfLinkedAccountRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LinkedAccountRepresentationFromJSON(json: any): LinkedAccountRepresentation {
    return LinkedAccountRepresentationFromJSONTyped(json, false);
}

export function LinkedAccountRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedAccountRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connected': !exists(json, 'connected') ? undefined : json['connected'],
        'isSocial': !exists(json, 'isSocial') ? undefined : json['isSocial'],
        'providerAlias': !exists(json, 'providerAlias') ? undefined : json['providerAlias'],
        'providerName': !exists(json, 'providerName') ? undefined : json['providerName'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'linkedUsername': !exists(json, 'linkedUsername') ? undefined : json['linkedUsername'],
    };
}

export function LinkedAccountRepresentationToJSON(value?: LinkedAccountRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connected': value.connected,
        'isSocial': value.isSocial,
        'providerAlias': value.providerAlias,
        'providerName': value.providerName,
        'displayName': value.displayName,
        'linkedUsername': value.linkedUsername,
    };
}

