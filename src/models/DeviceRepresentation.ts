/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SessionRepresentation } from './SessionRepresentation';
import {
    SessionRepresentationFromJSON,
    SessionRepresentationFromJSONTyped,
    SessionRepresentationToJSON,
} from './SessionRepresentation';

/**
 * 
 * @export
 * @interface DeviceRepresentation
 */
export interface DeviceRepresentation {
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    os?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    osVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    browser?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRepresentation
     */
    device?: string;
    /**
     * 
     * @type {number}
     * @memberof DeviceRepresentation
     */
    lastAccess?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceRepresentation
     */
    current?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceRepresentation
     */
    mobile?: boolean;
    /**
     * 
     * @type {Array<SessionRepresentation>}
     * @memberof DeviceRepresentation
     */
    sessions?: Array<SessionRepresentation>;
}

/**
 * Check if a given object implements the DeviceRepresentation interface.
 */
export function instanceOfDeviceRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeviceRepresentationFromJSON(json: any): DeviceRepresentation {
    return DeviceRepresentationFromJSONTyped(json, false);
}

export function DeviceRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'os': !exists(json, 'os') ? undefined : json['os'],
        'osVersion': !exists(json, 'osVersion') ? undefined : json['osVersion'],
        'browser': !exists(json, 'browser') ? undefined : json['browser'],
        'device': !exists(json, 'device') ? undefined : json['device'],
        'lastAccess': !exists(json, 'lastAccess') ? undefined : json['lastAccess'],
        'current': !exists(json, 'current') ? undefined : json['current'],
        'mobile': !exists(json, 'mobile') ? undefined : json['mobile'],
        'sessions': !exists(json, 'sessions') ? undefined : ((json['sessions'] as Array<any>).map(SessionRepresentationFromJSON)),
    };
}

export function DeviceRepresentationToJSON(value?: DeviceRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ipAddress': value.ipAddress,
        'os': value.os,
        'osVersion': value.osVersion,
        'browser': value.browser,
        'device': value.device,
        'lastAccess': value.lastAccess,
        'current': value.current,
        'mobile': value.mobile,
        'sessions': value.sessions === undefined ? undefined : ((value.sessions as Array<any>).map(SessionRepresentationToJSON)),
    };
}

