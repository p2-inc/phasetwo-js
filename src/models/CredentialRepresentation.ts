/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserCredentialMetadataRepresentation } from './UserCredentialMetadataRepresentation';
import {
    UserCredentialMetadataRepresentationFromJSON,
    UserCredentialMetadataRepresentationFromJSONTyped,
    UserCredentialMetadataRepresentationToJSON,
} from './UserCredentialMetadataRepresentation';

/**
 * 
 * @export
 * @interface CredentialRepresentation
 */
export interface CredentialRepresentation {
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    helpText?: string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    iconCssClass?: string;
    /**
     * 
     * @type {string}
     * @memberof CredentialRepresentation
     */
    updateAction?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CredentialRepresentation
     */
    removeable?: boolean;
    /**
     * 
     * @type {Array<UserCredentialMetadataRepresentation>}
     * @memberof CredentialRepresentation
     */
    userCredentialsMetadatas?: Array<UserCredentialMetadataRepresentation>;
}

/**
 * Check if a given object implements the CredentialRepresentation interface.
 */
export function instanceOfCredentialRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CredentialRepresentationFromJSON(json: any): CredentialRepresentation {
    return CredentialRepresentationFromJSONTyped(json, false);
}

export function CredentialRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CredentialRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'helpText': !exists(json, 'helpText') ? undefined : json['helpText'],
        'iconCssClass': !exists(json, 'iconCssClass') ? undefined : json['iconCssClass'],
        'updateAction': !exists(json, 'updateAction') ? undefined : json['updateAction'],
        'removeable': !exists(json, 'removeable') ? undefined : json['removeable'],
        'userCredentialsMetadatas': !exists(json, 'userCredentialsMetadatas') ? undefined : ((json['userCredentialsMetadatas'] as Array<any>).map(UserCredentialMetadataRepresentationFromJSON)),
    };
}

export function CredentialRepresentationToJSON(value?: CredentialRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'category': value.category,
        'displayName': value.displayName,
        'helpText': value.helpText,
        'iconCssClass': value.iconCssClass,
        'updateAction': value.updateAction,
        'removeable': value.removeable,
        'userCredentialsMetadatas': value.userCredentialsMetadatas === undefined ? undefined : ((value.userCredentialsMetadatas as Array<any>).map(UserCredentialMetadataRepresentationToJSON)),
    };
}

