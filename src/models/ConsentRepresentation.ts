/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConsentScopeRepresentation } from './ConsentScopeRepresentation';
import {
    ConsentScopeRepresentationFromJSON,
    ConsentScopeRepresentationFromJSONTyped,
    ConsentScopeRepresentationToJSON,
} from './ConsentScopeRepresentation';

/**
 * 
 * @export
 * @interface ConsentRepresentation
 */
export interface ConsentRepresentation {
    /**
     * 
     * @type {number}
     * @memberof ConsentRepresentation
     */
    createDate?: number;
    /**
     * 
     * @type {number}
     * @memberof ConsentRepresentation
     */
    lastUpdatedDate?: number;
    /**
     * 
     * @type {Array<ConsentScopeRepresentation>}
     * @memberof ConsentRepresentation
     */
    grantedScopes?: Array<ConsentScopeRepresentation>;
}

/**
 * Check if a given object implements the ConsentRepresentation interface.
 */
export function instanceOfConsentRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConsentRepresentationFromJSON(json: any): ConsentRepresentation {
    return ConsentRepresentationFromJSONTyped(json, false);
}

export function ConsentRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsentRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createDate': !exists(json, 'createDate') ? undefined : json['createDate'],
        'lastUpdatedDate': !exists(json, 'lastUpdatedDate') ? undefined : json['lastUpdatedDate'],
        'grantedScopes': !exists(json, 'grantedScopes') ? undefined : ((json['grantedScopes'] as Array<any>).map(ConsentScopeRepresentationFromJSON)),
    };
}

export function ConsentRepresentationToJSON(value?: ConsentRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createDate': value.createDate,
        'lastUpdatedDate': value.lastUpdatedDate,
        'grantedScopes': value.grantedScopes === undefined ? undefined : ((value.grantedScopes as Array<any>).map(ConsentScopeRepresentationToJSON)),
    };
}

