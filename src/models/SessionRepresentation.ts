/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Account API
 * Derived from the code at https://github.com/keycloak/keycloak/blob/main/services/src/main/java/org/keycloak/services/resources/account/AccountRestService.java 
 *
 * The version of the OpenAPI document: 20.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClientRepresentation } from './ClientRepresentation';
import {
    ClientRepresentationFromJSON,
    ClientRepresentationFromJSONTyped,
    ClientRepresentationToJSON,
} from './ClientRepresentation';

/**
 * 
 * @export
 * @interface SessionRepresentation
 */
export interface SessionRepresentation {
    /**
     * 
     * @type {string}
     * @memberof SessionRepresentation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionRepresentation
     */
    ipAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionRepresentation
     */
    started?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionRepresentation
     */
    lastAccess?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionRepresentation
     */
    expires?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionRepresentation
     */
    browser?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionRepresentation
     */
    current?: boolean;
    /**
     * 
     * @type {Array<ClientRepresentation>}
     * @memberof SessionRepresentation
     */
    clients?: Array<ClientRepresentation>;
}

/**
 * Check if a given object implements the SessionRepresentation interface.
 */
export function instanceOfSessionRepresentation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SessionRepresentationFromJSON(json: any): SessionRepresentation {
    return SessionRepresentationFromJSONTyped(json, false);
}

export function SessionRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionRepresentation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'started': !exists(json, 'started') ? undefined : json['started'],
        'lastAccess': !exists(json, 'lastAccess') ? undefined : json['lastAccess'],
        'expires': !exists(json, 'expires') ? undefined : json['expires'],
        'browser': !exists(json, 'browser') ? undefined : json['browser'],
        'current': !exists(json, 'current') ? undefined : json['current'],
        'clients': !exists(json, 'clients') ? undefined : ((json['clients'] as Array<any>).map(ClientRepresentationFromJSON)),
    };
}

export function SessionRepresentationToJSON(value?: SessionRepresentation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'ipAddress': value.ipAddress,
        'started': value.started,
        'lastAccess': value.lastAccess,
        'expires': value.expires,
        'browser': value.browser,
        'current': value.current,
        'clients': value.clients === undefined ? undefined : ((value.clients as Array<any>).map(ClientRepresentationToJSON)),
    };
}

